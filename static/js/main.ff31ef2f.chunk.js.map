{"version":3,"sources":["SearchForm.js","SearchList.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","state","limit","value","onSubmit","bind","onClearResults","onClearSearchTerm","event","preventDefault","this","onFormSubmit","clearResults","clearSearchTerm","type","placeholder","term","onChange","onSearchValueChange","target","name","id","setState","Array","fill","map","index","key","disabled","isSearching","onClick","onSingleSearchClick","React","Component","SearchList","searchComplete","list","length","className","item","joke","App","searchTerm","jokes","isFetchingJokes","isSearchComplete","searchJokes","onSearchChange","fetch","method","headers","Accept","then","response","json","results","alt","src","renderJokes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff31ef2f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './SearchForm.css';\r\n\r\nclass SearchForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            limit: 20,\r\n            value: 'Enter search term...'\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onClearResults = this.onClearResults.bind(this);\r\n        this.onClearSearchTerm = this.onClearSearchTerm.bind(this);\r\n\r\n    }\r\n\r\n\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onFormSubmit(this.state.limit);\r\n\r\n    }\r\n    onClearResults(event) {\r\n        event.preventDefault();\r\n        this.props.clearResults();\r\n\r\n    }\r\n    onClearSearchTerm(event) {\r\n        event.preventDefault();\r\n        this.props.clearSearchTerm();\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit}>\r\n                <input type=\"text\" placeholder=\"Enter search term...\" value={this.props.term}\r\n                       onChange={event => this.props.onSearchValueChange(event.target.value)}/>\r\n                <select name=\"Joke Limit\" id=\"limit\" onChange={event => this.setState({limit:event.target.value})}\r\n                        value={this.state.limit}>\r\n                    {Array(20).fill(0).map((value, index) => {\r\n\r\n                        return <option key={index + 1} value={index + 1}>{index + 1}</option>\r\n                    })}\r\n                </select>\r\n                {/* TODO 5. BONUS: update search input so results update as you type. */}\r\n                <button disabled={this.props.isSearching}>Search</button>\r\n                <button onClick={this.props.onSingleSearchClick} disabled={this.props.isSearching}>I'm feeling funny\r\n                </button>\r\n                <br/><br/>\r\n                <button onClick={this.onClearResults}> Clear Results</button>\r\n                <button onClick={this.onClearSearchTerm}> Clear Search Term</button>\r\n            </form>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SearchForm;","import React from \"react\";\r\nimport \"./SearchList.css\";\r\n\r\nconst SearchList = props =>{\r\n    return (\r\n        props.searchComplete && props.list.length === 0 ? <p className=\"jokes-list\">no results found!</p>:\r\n        <ul className=\"jokes-list\">\r\n            {props.list.map(item => <li key={item.id}>{item.joke}</li>)}\r\n        </ul>);\r\n};\r\n\r\nexport default SearchList;","import React from 'react';\r\nimport './App.css';\r\nimport SearchForm from \"./SearchForm\";\r\nimport SearchList from \"./SearchList\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n\r\n            searchTerm: '',\r\n            jokes: [],\r\n            isFetchingJokes: false,\r\n            isSearchComplete: false\r\n        };\r\n\r\n        this.searchJokes = this.searchJokes.bind(this);\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n    }\r\n\r\n    searchJokes(limit = 20) {\r\n        this.setState({\r\n            isFetchingJokes: true,\r\n            isSearchComplete: false\r\n        });\r\n        fetch(`https://icanhazdadjoke.com/search?term=${this.state.searchTerm}&limit=${limit}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                const jokes = json.results;\r\n                this.setState({\r\n                    jokes,\r\n                    isFetchingJokes: false,\r\n                    isSearchComplete: true\r\n                });\r\n            });\r\n    }\r\n\r\n    onSearchChange(value) {\r\n        this.setState({searchTerm: value});\r\n    }\r\n\r\n\r\n    renderJokes() {\r\n        return (\r\n            <SearchList\r\n                list={this.state.jokes}\r\n                searchComplete={this.state.isSearchComplete}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <img alt=\"dad joke logo\" className=\"logo\" src=\"/google-dad-jokes-logo.png\"/>\r\n                <SearchForm\r\n                    onFormSubmit={this.searchJokes}\r\n                    onSearchValueChange={this.onSearchChange}\r\n                    isSearching={this.state.isFetchingJokes}\r\n                    clearResults={()=> this.setState({jokes: [],isSearchComplete: false})}\r\n                    clearSearchTerm={()=> this.setState({searchTerm: ''})}\r\n                    onSingleSearchClick={()=> this.searchJokes(1)}\r\n                    term={this.state.searchTerm}\r\n                />\r\n\r\n                {this.state.isFetchingJokes ? 'Loading joke... ' : this.renderJokes()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}